
from numpy import random
import numpy as np

def neural(x,deriv=False):
    if(deriv==True):
        return x*(1-x)
    return 1/(1+np.exp(-x))
# input of the training dataset
X = np.array([[0,0,1],[0,1,1],[1,0,1],[1,1,1]])
# output of the trainining dataset
y = np.array([[0],[1],[1],[0]])
np.random.seed(1)
# randomly initialize our weights with mean 0
syn0 = 2*np.random.random((3,4)) - 1
syn1 = 2*np.random.random((4,1)) - 1
p = 100
for j in range (p):
    # Feed forward through layers 0, 1, and 2
    l0 = X
    l1 = neural(np.dot(l0,syn0))
    l2 = neural(np.dot(l1,syn1))
# how much did we miss the target value?
    l2_prob_Error = (y - l2)
    if (j% 100) == 0:
        print ("Prob" + str(np.mean(np.abs(l2_prob_Error))))
        Prob= (np.mean(np.abs(l2_prob_Error)))
        print ("probability of hitting the Target Extends To:")
        if Prob < 0.5:
          print("---->1")
        else:
          print("---->0")
